// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	zeroUserFieldNames          = builder.RawFieldNames(&ZeroUser{}, true)
	zeroUserRows                = strings.Join(zeroUserFieldNames, ",")
	zeroUserRowsExpectAutoSet   = strings.Join(stringx.Remove(zeroUserFieldNames, "user_id"), ",")
	zeroUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(zeroUserFieldNames, "user_id"))

	cachePublicZeroUserUserIdPrefix   = "cache:public:zeroUser:userId:"
	cachePublicZeroUserUsernamePrefix = "cache:public:zeroUser:username:"
)

type (
	zeroUserModel interface {
		Insert(ctx context.Context, data *ZeroUser) (*ZeroUser, error)
		FindOne(ctx context.Context, userId string) (*ZeroUser, error)
		FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error)
    FindMany(ctx context.Context)(*[]ZeroUser, error)
		Update(ctx context.Context, data *ZeroUser) error
		Delete(ctx context.Context, userId string) error
	}

	defaultZeroUserModel struct {
		sqlc.CachedConn
		table string
	}

	ZeroUser struct {
		UserId   string  `db:"user_id"`
		Username string `db:"username"`
	}
)

func newZeroUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultZeroUserModel {
	return &defaultZeroUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."zero_user"`,
	}
}

func (m *defaultZeroUserModel) Delete(ctx context.Context, userId string) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	publicZeroUserUserIdKey := fmt.Sprintf("%s%v", cachePublicZeroUserUserIdPrefix, userId)
	publicZeroUserUsernameKey := fmt.Sprintf("%s%v", cachePublicZeroUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where user_id = $1", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, publicZeroUserUserIdKey, publicZeroUserUsernameKey)
	return err
}


func (m *defaultZeroUserModel)FindMany(ctx context.Context)(*[]ZeroUser, error){
	var resp  = make([]ZeroUser,0)
	err := m.QueryRowCtx(ctx, &resp, "", func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s", zeroUserRows, m.table)
    return conn.QueryRowsCtx(ctx, &resp, query)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultZeroUserModel) FindOne(ctx context.Context, userId string) (*ZeroUser, error) {
	publicZeroUserUserIdKey := fmt.Sprintf("%s%v", cachePublicZeroUserUserIdPrefix, userId)
	var resp ZeroUser
	err := m.QueryRowCtx(ctx, &resp, publicZeroUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where user_id = $1 limit 1", zeroUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) FindOneByUsername(ctx context.Context, username string) (*ZeroUser, error) {
	publicZeroUserUsernameKey := fmt.Sprintf("%s%v", cachePublicZeroUserUsernamePrefix, username)
	var resp ZeroUser
	err := m.QueryRowIndexCtx(ctx, &resp, publicZeroUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where username = $1 limit 1", zeroUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultZeroUserModel) Insert(ctx context.Context, data *ZeroUser) (*ZeroUser, error) {
  var resp ZeroUser
	publicZeroUserUserIdKey := fmt.Sprintf("%s%v", cachePublicZeroUserUserIdPrefix, data.UserId)
	publicZeroUserUsernameKey := fmt.Sprintf("%s%v", cachePublicZeroUserUsernamePrefix, data.Username)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1) RETURNING username, user_id;", m.table, zeroUserRowsExpectAutoSet)
    err = conn.QueryRowCtx(ctx,&resp, query, data.Username)
    return 
	}, publicZeroUserUserIdKey, publicZeroUserUsernameKey)

	return &resp, err
}

func (m *defaultZeroUserModel) Update(ctx context.Context, newData *ZeroUser) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	publicZeroUserUserIdKey := fmt.Sprintf("%s%v", cachePublicZeroUserUserIdPrefix, data.UserId)
	publicZeroUserUsernameKey := fmt.Sprintf("%s%v", cachePublicZeroUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where user_id = $1", m.table, zeroUserRowsWithPlaceHolder)
		_,err= conn.ExecCtx(ctx, query, newData.UserId, newData.Username)
    return
	}, publicZeroUserUserIdKey, publicZeroUserUsernameKey)
	return err
}

func (m *defaultZeroUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicZeroUserUserIdPrefix, primary)
}

func (m *defaultZeroUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where user_id = $1 limit 1", zeroUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultZeroUserModel) tableName() string {
	return m.table
}
